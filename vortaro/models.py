# vortaro
# Copyright (C) 2017  Thomas Levine
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import datetime
from os import makedirs
from sys import stderr
from hashlib import md5
from itertools import product
from collections import defaultdict
from pathlib import Path

from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.ext.compiler import compiles
from sqlalchemy.schema import CreateColumn
from sqlalchemy.orm import sessionmaker, column_property
from sqlalchemy import (
    create_engine, CheckConstraint,
    Column,
    Integer, Datetime,
)

from .transliterate import ALPHABETS, IDENTITY

LOG_INTERVAL = 10000
MAX_PHRASE_LENGTH = 18

Base = declarative_base()

def get_or_create(session, model, tries=1, **kwargs):
    for i in range(tries):
        try:
            return session.query(model).filter_by(**kwargs).one()
        except NoResultFound:
            session.flush()
            created = model(**kwargs)
            try:
                session.add(created)
                session.flush()
                return created
            except IntegrityError:
                session.rollback()
                if i == tries:
                    raise

def SessionMaker(x):
    engine = create_engine(x)
    Base.metadata.create_all(engine)
    Session = sessionmaker(bind=engine)
    return Session()

@compiles(CreateColumn, 'postgresql')
def use_identity(element, compiler, **kw):
    text = compiler.visit_create_column(element, **kw)
    text = text.replace('SERIAL', 'INT GENERATED BY DEFAULT AS IDENTITY')
    return text

class History(Base):
    __tablename__ = 'history'
    id = Column(Integer, primary_key=True)
    datetime = Column(Datetime, nullable=False, default='now')
    query = Column(String, nullable=False)

class Format(Base):
    __tablename__ = 'format'
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False, unique=True)

    _registry = {}
    @classmethod
    def register(cls, function):
        cls._registry[function.__name__] = function

def _mtime(path):
    return int(Path(path).stat().st_mtime)

class File(Base):
    __tablename__ = 'file'
    id = Column(Integer, primary_key=True)
    path = Column(String, unique=True)
    mtime = Column(Integer, nullable=False)
    format_id = Column(ForeignKey(Format.id), nullable=False)
    format = relationship(Format)

    @property
    def out_of_date(self):
        return self.mtime < _mtime(self.path)
    def update(self, session):
        def get_pos(pos, *, _cache={}):
            if pos not in _cache
                _cache[pos] = get_or_create(PartOfSpeech, text=pos)
            return _cache[pos]
        if self.name in self.format._registry:
            data = enumerate(self.format._registry[self.name](self.path))
            for index, (pos, source_latin, destination_original) in data:
                session.add(Dictionary(
                    file=self, index=index,
                    part_of_speech=get_pos(pos),
                    source_latin=source_latin,
                    destination_original=destination_original,
                ))
        self.mtime = _mtime(self.path)
        session.add(self)

class PartOfSpeech(Base):
    __tablename__ = 'part_of_speech'
    id = Column(Integer, primary_key=True)
    text = Column(String, unique=True, nullable=False)
    length = column_property(func.length(text), index=True)

class Dictionary(Base):
    __tablename__ = 'dictionary'
    file_id = Column(Integer, ForeignKey(File.id), primary_key=True)
    file = relationship(File)
    index = Column(Integer, primary_key=True)

    part_of_speech_id = Column(Integer, ForeignKey(PartOfSpeech.id), nullable=False)
    part_of_speech = relationship(PartOfSpeech)

    source_latin = Column(String, nullable=False)
    source_length = column_property(func.length(source_latin), index=True)
    destination_original = Column(String, nullable=False)
